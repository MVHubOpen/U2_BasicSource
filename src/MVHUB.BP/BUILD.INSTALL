*-------------------------------------------------------
* mvHubOpen, copyright (c) by James F Thompson
* Distributed under an MIT license:
*                    https://opensource.org/licenses/MIT
*-------------------------------------------------------
    INCLUDE MVHUB.BP MVHUB.MAP.INCLUDE
*
    OPEN "MVHUB.BP" TO F.BP ELSE ABORT 201,"MVHUB.BP"
    OPEN "MVHUB.TEMPLATE" TO F.TEMPLATE ELSE ABORT 201,"MVHUB.TEMPLATE"
*
    MVHUB.MODULE="MVHUB_CORE"
*
    SRC="*-------------------------------------------------------"
    SRC<-1>="* mvHubOpen, copyright (c) by James F Thompson"
    SRC<-1>="* Distributed under an MIT license:"
    SRC<-1>="*                    https://opensource.org/licenses/MIT"
    SRC<-1>="* Build Install for  Version #":MAP$VERSION.NUMBER
    SRC<-1>="* Built ":TIMEDATE()
    SRC<-1>="*-------------------------------------------------------"
*
    SRC<-1>='EQUATE CHAR$LF LIT "CHAR(10)"'
    SRC<-1>='EQUATE CHAR$RETURN LIT "CHAR(13)"':SEPARATOR
*
    SRC<-1>='OPEN "MVHUB.BP" TO F.BP ELSE'
    SRC<-1>='EXECUTE "ICREATE-FILE DATA MVHUB.BP 19"'
    SRC<-1>='EXECUTE "ICREATE-FILE DICT MVHUB.BP 18 11 4"'
    SRC<-1>='OPEN "MVHUB.BP" TO F.BP ELSE'
    SRC<-1>='ABORT "UNABLE TO CREATE SOURCE FILE"'
    SRC<-1>="END":@AM:"END":SEPARATOR
    SRC<-1>='OPEN "DICT","MVHUB.BP" TO FD.BP ELSE'
    SRC<-1>='ABORT "UNABLE TO OPEN DICT SOURCE FILE"'
    SRC<-1>="END":SEPARATOR
*
    SRC<-1>='REC="D":@AM:0:@AM:"MCU":@AM:"Program Id":@AM:"30L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.BP,"@ID"':SEPARATOR
*
    SRC<-1>='OPEN "MVHUB.MAP" TO F.MAP ELSE'
    SRC<-1>='EXECUTE "ICREATE-FILE DATA MVHUB.MAP 18 101 4"'
    SRC<-1>='EXECUTE "ICREATE-FILE DICT MVHUB.MAP 18 11 4"'
    SRC<-1>='OPEN "MVHUB.MAP" TO F.MAP ELSE'
    SRC<-1>='ABORT "UNABLE TO CREATE MAP FILE"'
    SRC<-1>="END":@AM:"END":SEPARATOR
    SRC<-1>='OPEN "DICT","MVHUB.MAP" TO FD.MAP ELSE'
    SRC<-1>='ABORT "UNABLE TO OPEN DICT MAP FILE"'
    SRC<-1>="END":SEPARATOR
    SRC<-1>="CLEARFILE FD.MAP":SEPARATOR
*
    SRC<-1>='REC="D":@AM:0:@AM:"MCU":@AM:"Map Id":@AM:"30L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"@ID"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MAP$TITLE:':@AM:"":@AM:"Title":@AM:"30L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"TITLE"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MAP$DATA.FILENAME:':@AM:"":@AM:"Database Filename":@AM:"30L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"FILENAME"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MAP$MAP.VERSION:':@AM:"":@AM:"Version":@AM:"12L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"VERSION"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MAP$DELIMITER:':@AM:"":@AM:"Delimiter":@AM:"9L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"DELIMITER"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MAP$SOURCEFILE:':@AM:"":@AM:"Source Code File":@AM:"15L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"SOURCE.FILE"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MAP$MODULE:':@AM:"":@AM:"Module":@AM:"15L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"MODULE"':SEPARATOR
*
    SRC<-1>='REC="I":@AM:':"'":'TRANS("MVHUB.MODULE",@RECORD<':MAP$MODULE:',1>,1,"X")':"'":'@AM:"":@AM:"Module Description":@AM:"30L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"MODULE.DESCRIPTION"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MAP$CREATECODE:':@AM:"":@AM:"Create Code":@AM:"80L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"CREATE.CODE"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MAP$READCODE:':@AM:"":@AM:"Read Code":@AM:"80L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"Read.CODE"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MAP$WRITECODE:':@AM:"":@AM:"Write Code":@AM:"80L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"WRITE.CODE"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MAP$INITCODE:':@AM:"":@AM:"Initialize Code":@AM:"80L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"INIT.CODE"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MAP$EVENTCODE:':@AM:"":@AM:"Event Code":@AM:"80L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAP,"EVENT.CODE"':SEPARATOR
*
    ASSOC.LIST=""
    SRC<-1>='REC="D":@AM:':MAP$ASSOC:':@AM:"MCU":@AM:"Associated Key":@AM:"20L":@AM:"M":@AM:"ASSOCIATED"'
    SRC<-1>='WRITE REC ON FD.MAP,"ASSOC.KEY"':SEPARATOR ; ASSOC.LIST:=" ASSOC.KEY"
*
    SRC<-1>='REC="D":@AM:':MAP$ASSOC_NAME:':@AM:"":@AM:"Associated Name":@AM:"20L":@AM:"M":@AM:"ASSOCIATED"'
    SRC<-1>='WRITE REC ON FD.MAP,"ASSOC.NAME"':SEPARATOR ; ASSOC.LIST:=" ASSOC.NAME"
*
    SRC<-1>='REC="D":@AM:':MAP$ASSOC_DESCRIPTION:':@AM:"":@AM:"Associated Description":@AM:"30L":@AM:"M":@AM:"ASSOCIATED"'
    SRC<-1>='WRITE REC ON FD.MAP,"ASSOC.DESC"':SEPARATOR ; ASSOC.LIST:=" ASSOC.DESC"
*
    SRC<-1>='REC="D":@AM:':MAP$CTRLATTR:':@AM:"MD0":@AM:"Ctrl Attr":@AM:"20L":@AM:"M":@AM:"ASSOCIATED"'
    SRC<-1>='WRITE REC ON FD.MAP,"ASSOC.CTRLATTR"':SEPARATOR ; ASSOC.LIST:=" ASSOC.CTRLATTR"
*
    SRC<-1>='REC="D":@AM:':MAP$ASSOC_TYPE:':@AM:"":@AM:"Type":@AM:"4L":@AM:"M":@AM:"ASSOCIATED"'
    SRC<-1>='WRITE REC ON FD.MAP,"ASSOC.TYPE"':SEPARATOR ; ASSOC.LIST:=" ASSOC.TYPE"
*
    SRC<-1>='REC="PH":@AM:"':TRIM(ASSOC.LIST):'"'
    SRC<-1>='WRITE REC ON FD.MAP,"ASSOC"'
*
    FLD.LIST=""
    SRC<-1>='REC="D":@AM:':FLD$RECORD+MAP$BASE:':@AM:"":@AM:"Record":@AM:"4L":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.RECORD"':SEPARATOR ; FLD.LIST:=" FLD.RECORD"
*
    SRC<-1>='REC="D":@AM:':FLD$NAME+MAP$BASE:':@AM:"":@AM:"Name":@AM:"20L":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.NAME"':SEPARATOR ; FLD.LIST:=" FLD.NAME"
*
    SRC<-1>='REC="D":@AM:':FLD$ASSOC+MAP$BASE:':@AM:"MCU":@AM:"Association":@AM:"20L":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.ASSOC"':SEPARATOR ; FLD.LIST:=" FLD.ASSOC"
*
    SRC<-1>='REC="D":@AM:':FLD$ATTR+MAP$BASE:':@AM:"MD0":@AM:"Attr":@AM:"4R":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.ATTR"':SEPARATOR ; FLD.LIST:=" FLD.ATTR"
*
    SRC<-1>='REC="D":@AM:':FLD$VALPOS+MAP$BASE:':@AM:"MD0":@AM:"VPos":@AM:"4R":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.VAL"':SEPARATOR ; FLD.LIST:=" FLD.VAL"
*
    SRC<-1>='REC="D":@AM:':FLD$SUBVALPOS+MAP$BASE:':@AM:"MD0":@AM:"SPos":@AM:"4R":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.SVAL"':SEPARATOR ; FLD.LIST:=" FLD.SVAL"
*
    SRC<-1>='REC="D":@AM:':FLD$TYPE+MAP$BASE:':@AM:"MCU":@AM:"Type":@AM:"4L":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.TYPE"':SEPARATOR ; FLD.LIST:=" FLD.TYPE"
*
    SRC<-1>='REC="D":@AM:':FLD$CONV+MAP$BASE:':@AM:"":@AM:"Conversion":@AM:"20L":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.CONV"':SEPARATOR ; FLD.LIST:=" FLD.CONV"
*
    SRC<-1>='REC="D":@AM:':FLD$DEFAULT+MAP$BASE:':@AM:"":@AM:"Default":@AM:"20L":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.DEFAULT"':SEPARATOR ; FLD.LIST:=" FLD.DEFAULT"
*
    SRC<-1>='REC="D":@AM:':FLD$LENGTH+MAP$BASE:':@AM:"MD0":@AM:"Length":@AM:"6R":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.LENGTH"':SEPARATOR ; FLD.LIST:=" FLD.LENGTH"
*
    SRC<-1>='REC="D":@AM:':FLD$READONLY+MAP$BASE:':@AM:"":@AM:"ReadOnly":@AM:"8L":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.g"':SEPARATOR ; FLD.LIST:=" FLD.READONLY"
*
    SRC<-1>='REC="D":@AM:':FLD$QUERYITEM+MAP$BASE:':@AM:"":@AM:"Query":@AM:"8L":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.QUERYITEM"':SEPARATOR ; FLD.LIST:=" FLD.QUERYITEM"
*
    SRC<-1>='REC="D":@AM:':FLD$LABEL+MAP$BASE:':@AM:"":@AM:"Label":@AM:"20L":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.LABEL"':SEPARATOR ; FLD.LIST:=" FLD.LABEL"
*
    SRC<-1>='REC="D":@AM:':FLD$COMMENT+MAP$BASE:':@AM:"":@AM:"Comment":@AM:"80L":@AM:"M":@AM:"FIELDS"'
    SRC<-1>='WRITE REC ON FD.MAP,"FLD.COMMENT"':SEPARATOR ; FLD.LIST:=" FLD.COMMENT"
*
    SRC<-1>='REC="PH":@AM:"':TRIM(FLD.LIST):'"'
    SRC<-1>='WRITE REC ON FD.MAP,"FIELDS"':SEPARATOR
*
* MODULE
*
    SRC<-1>='OPEN "MVHUB.MODULE" TO F.MODULE ELSE'
    SRC<-1>='EXECUTE "ICREATE-FILE DATA MVHUB.MODULE 18 101 4"'
    SRC<-1>='EXECUTE "ICREATE-FILE DICT MVHUB.MODULE 18 11 4"'
    SRC<-1>='EXECUTE "ICREATE-FILE DATA MVHUB.MODULE,BASE 19"'
    SRC<-1>='OPEN "MVHUB.MODULE" TO F.MODULE ELSE'
    SRC<-1>='ABORT "UNABLE TO CREATE MODULE FILE"'
    SRC<-1>="END":@AM:"END":SEPARATOR
    SRC<-1>='OPEN "DICT","MVHUB.MODULE" TO FD.MODULE ELSE'
    SRC<-1>='ABORT "UNABLE TO OPEN DICT MODULE FILE"'
    SRC<-1>="END":SEPARATOR
*
    SRC<-1>='REC="D":@AM:0:@AM:"MCU":@AM:"Module":@AM:"30L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MODULE,"@ID"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MODULE$TITLE:':@AM:"":@AM:"Title":@AM:"30L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MODULE,"TITLE"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:': MODULE$JSNAME:':@AM:"":@AM:"Javascript Name":@AM:"30L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MODULE,"JS.NAME"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':MODULE$BLDLST_MAPIID:':@AM:"":@AM:"Map Id":@AM:"30L":@AM:"M":@AM:"MAPS"'
    SRC<-1>='WRITE REC ON FD.MODULE,"MAP.ID"':SEPARATOR
*
* Template File
*
    SRC<-1>='OPEN "MVHUB.TEMPLATE" TO F.TEMPLATE ELSE'
    SRC<-1>='EXECUTE "ICREATE-FILE DATA MVHUB.TEMPLATE 18 101 4"'
    SRC<-1>='EXECUTE "ICREATE-FILE DICT MVHUB.TEMPLATE 18 11 4"'
    SRC<-1>='OPEN "MVHUB.TEMPLATE" TO F.TEMPLATE ELSE'
    SRC<-1>='ABORT "UNABLE TO CREATE MAP FILE"'
    SRC<-1>="END":@AM:"END":SEPARATOR
    SRC<-1>='OPEN "DICT","MVHUB.TEMPLATE" TO FD.TEMPLATE ELSE'
    SRC<-1>='ABORT "UNABLE TO OPEN DICT TEMPLATE FILE"'
    SRC<-1>="END":SEPARATOR
    SRC<-1>="CLEARFILE FD.TEMPLATE":SEPARATOR
*
    SRC<-1>='REC="D":@AM:0:@AM:"":@AM:"Template Id":@AM:"20L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.TEMPLATE,"@ID"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':TEMPLATE$DESCRIPTION:':@AM:"":@AM:"Description":@AM:"30L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.TEMPLATE,"DESCRIPTION"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':TEMPLATE$INBOUND:':@AM:"":@AM:"Inbound Code":@AM:"50L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.TEMPLATE,"INBOUND"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':TEMPLATE$OUTBOUND:':@AM:"":@AM:"Outbound Code":@AM:"50L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.TEMPLATE,"OUTBOUND"':SEPARATOR
*
    SRC<-1>='REC="D":@AM:':TEMPLATE$JSDEFAULT:':@AM:"":@AM:"JS Default":@AM:"50L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.TEMPLATE,"JS.DEFAULT"':SEPARATOR
*
* Log File
*
    SRC<-1>='OPEN "MVHUB.LOG" TO F.MAPLOG ELSE'
    SRC<-1>=' EXECUTE "ICREATE-FILE DATA MVHUB.LOG 18 101 4"'
    SRC<-1>=' EXECUTE "ICREATE-FILE DICT MVHUB.LOG 18 11 4"'
    SRC<-1>=' OPEN "MVHUB.MAP" TO F.MAPLOG ELSE'
    SRC<-1>='  ABORT "UNABLE TO CREATE MAP LOG FILE"'
    SRC<-1>=" END"
    SRC<-1>="END":SEPARATOR
    SRC<-1>='OPEN "DICT","MVHUB.LOG" TO FD.MAPLOG ELSE'
    SRC<-1>=' ABORT "UNABLE TO OPEN DICT MAP FILE"'
    SRC<-1>="END":SEPARATOR
    SRC<-1>="CLEARFILE FD.MAPLOG":SEPARATOR
*
    SRC<-1>='REC="D":@AM:0:@AM:"":@AM:"Log Id":@AM:"30L":@AM:"S"'
    SRC<-1>='WRITE REC ON FD.MAPLOG,"@ID"':SEPARATOR
*
    ADD.ONLY=@FALSE
    CODE.ID="HANDLER.SUB.INCLUDE" ; COMPILE.IT=@FALSE ; GOSUB ADD.PROGRAM
    CODE.ID="MVHUB.MAP.INCLUDE" ; COMPILE.IT=@FALSE ; GOSUB ADD.PROGRAM
    CODE.ID="PROFILE.INCLUDE" ; COMPILE.IT=@FALSE ; ADD.ONLY=@TRUE ; GOSUB ADD.PROGRAM
    CODE.ID="CREATE.HANDLER" ; COMPILE.IT=@TRUE ; GOSUB ADD.PROGRAM
    CODE.ID="CREATE.MODULE" ; COMPILE.IT=@TRUE ; GOSUB ADD.PROGRAM
    CODE.ID="MODULE.HANDLER.SUB" ; COMPILE.IT=@TRUE ; GOSUB ADD.PROGRAM
    CODE.ID="TEST.HANDLER" ; COMPILE.IT=@TRUE ; GOSUB ADD.PROGRAM
*
    SELECT F.TEMPLATE ; SDONE=@FALSE
    LOOP
        READNEXT CODE.ID ELSE SDONE=@TRUE
    UNTIL SDONE DO
        GOSUB ADD.TEMPLATE
    REPEAT
*
    SRC<-1>='CRT "Create MVHUB.MAP Handler"'
    SRC<-1>='DELETE F.MAP,"MVHUB.MAP"'
    SRC<-1>='EXECUTE "CREATE.HANDLER MVHUB.MAP /BUILDMAP"'
    SRC<-1>='READ MAP.REC FROM F.MAP,"MVHUB.MAP" THEN ':@AM:"*"
*
    SRC<-1>='MAP.REC<':MAP$TITLE:'>="Map File for Handler Build"':@AM:"*"
    SRC<-1>='MAP.REC<':MAP$INITCODE:'>="INCLUDE MVHUB.BP MVHUB.MAP.INCLUDE"':@AM:"*"
*
    SRC<-1>=' MAP.REC<':MAP$WRITECODE:',-1>="WRITE RECORD ON FILE,ID"'
    SRC<-1>=' MAP.REC<':MAP$WRITECODE:',-1>=':"'":'EXECUTE ':QUOTE('CREATE.HANDLER MVHUB.MAP /COMPILE /CATALOG '):" CAPTURING MEMORY":"'"
    SRC<-1>="*"
*
    SRC<-1>="ACNT=DCOUNT(MAP.REC<":FLD$ATTR+MAP$BASE:">,@VM)"
    SRC<-1>="FOR APOS=1 TO ACNT"
    SRC<-1>=" BEGIN CASE"
    SRC<-1>=' CASE MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$ID:'"'
    SRC<-1>=' CASE MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$WORK:'"'
    SRC<-1>=' CASE MAP.REC<':FLD$ATTR+MAP$BASE:',APOS>=':MAP$TITLE:' AND MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$BASE:'"'
    SRC<-1>='  MAP.REC<':FLD$QUERYITEM+MAP$BASE:',APOS>="Y"'
*
    SRC<-1>=' CASE MAP.REC<':FLD$ATTR+MAP$BASE:',APOS>=':MAP$DATA.FILENAME:' AND MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$BASE:'"'
    SRC<-1>='  MAP.REC<':FLD$QUERYITEM+MAP$BASE:',APOS>="Y"'
*
    SRC<-1>=' CASE MAP.REC<':FLD$ATTR+MAP$BASE:',APOS>=':MAP$SOURCEFILE:' AND MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$BASE:'"'
    SRC<-1>='  MAP.REC<':FLD$QUERYITEM+MAP$BASE:',APOS>="Y"'
*
    SRC<-1>=' CASE MAP.REC<':FLD$ATTR+MAP$BASE:',APOS>=':MAP$MAP.VERSION:' AND MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$BASE:'"'
    SRC<-1>='  MAP.REC<':FLD$QUERYITEM+MAP$BASE:',APOS>="Y"'
*
    SRC<-1>=' CASE MAP.REC<':FLD$ATTR+MAP$BASE:',APOS>=':MAP$CREATECODE:' AND MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$BASE:'"'
    SRC<-1>='  MAP.REC<':FLD$CONV+MAP$BASE:',APOS>=":SOURCE_CODE"'
*
    SRC<-1>=' CASE MAP.REC<':FLD$ATTR+MAP$BASE:',APOS>=':MAP$READCODE:' AND MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$BASE:'"'
    SRC<-1>='  MAP.REC<':FLD$CONV+MAP$BASE:',APOS>=":SOURCE_CODE"'
*
    SRC<-1>=' CASE MAP.REC<':FLD$ATTR+MAP$BASE:',APOS>=':MAP$WRITECODE:' AND MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$BASE:'"'
    SRC<-1>='  MAP.REC<':FLD$CONV+MAP$BASE:',APOS>=":SOURCE_CODE"'
*
    SRC<-1>=' CASE MAP.REC<':FLD$ATTR+MAP$BASE:',APOS>=':MAP$INITCODE:' AND MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$BASE:'"'
    SRC<-1>='  MAP.REC<':FLD$CONV+MAP$BASE:',APOS>=":SOURCE_CODE"'
*
    SRC<-1>=' CASE MAP.REC<':FLD$ATTR+MAP$BASE:',APOS>=':MAP$EVENTCODE:' AND MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$BASE:'"'
    SRC<-1>='  MAP.REC<':FLD$CONV+MAP$BASE:',APOS>=":SOURCE_CODE"'
*
    SRC<-1>=' CASE MAP.REC<':FLD$ATTR+MAP$BASE:',APOS>=':FLD$READONLY+MAP$BASE:' AND MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$BASE:'"'
    SRC<-1>='  MAP.REC<':FLD$TYPE+MAP$BASE:',APOS>="':VARTYPE$BOOL:'"'
    SRC<-1>='  MAP.REC<':FLD$CONV+MAP$BASE:',APOS>=":YES_NO"'
    SRC<-1>='  MAP.REC<':FLD$DEFAULT+MAP$BASE:',APOS>="N"'
*
    SRC<-1>=' CASE MAP.REC<':FLD$ATTR+MAP$BASE:',APOS>=':FLD$QUERYITEM+MAP$BASE:' AND MAP.REC<':FLD$RECORD+MAP$BASE:',APOS>="':RECORD$BASE:'"'
    SRC<-1>='  MAP.REC<':FLD$TYPE+MAP$BASE:',APOS>="':VARTYPE$BOOL:'"'
    SRC<-1>='  MAP.REC<':FLD$CONV+MAP$BASE:',APOS>=":YES_NO"'
    SRC<-1>='  MAP.REC<':FLD$DEFAULT+MAP$BASE:',APOS>="N"'
*
    SRC<-1>=" END CASE"
    SRC<-1>="NEXT APOS"
*
    SRC<-1>=' MAP.REC<':MAP$MODULE:'>="':MVHUB.MODULE:'"'
    SRC<-1>=' WRITE MAP.REC ON F.MAP,"MVHUB.MAP"'
    SRC<-1>=' EXECUTE "CREATE.HANDLER MVHUB.MAP /COMPILE /CATALOG"'
    SRC<-1>="END"
*
    SRC<-1>='CRT "Create MVHUB.TEMPLATE Handler"'
    SRC<-1>='DELETE F.MAP,"MVHUB.TEMPLATE"'
    SRC<-1>='EXECUTE "CREATE.HANDLER MVHUB.TEMPLATE /BUILDMAP"'
    SRC<-1>='READ MAP.REC FROM F.MAP,"MVHUB.TEMPLATE" THEN ':@AM:"*"
*
    SRC<-1>='LOCATE(':TEMPLATE$INBOUND:',MAP.REC,':FLD$ATTR+MAP$BASE:';CODE.POS) THEN MAP.REC<':FLD$CONV+MAP$BASE:',APOS>=":SOURCE_CODE"'
    SRC<-1>='LOCATE(':TEMPLATE$OUTBOUND:',MAP.REC,':FLD$ATTR+MAP$BASE:';CODE.POS) THEN MAP.REC<':FLD$CONV+MAP$BASE:',APOS>=":SOURCE_CODE"'
*
    SRC<-1>=' MAP.REC<':MAP$MODULE:'>="':MVHUB.MODULE:'"'
    SRC<-1>=' WRITE MAP.REC ON F.MAP,"MVHUB.TEMPLATE"'
    SRC<-1>=' EXECUTE "CREATE.HANDLER MVHUB.TEMPLATE /COMPILE /CATALOG"'
    SRC<-1>="END"
*
    SRC<-1>='READU MODULE.REC FROM F.MODULE,"':MVHUB.MODULE:'" ELSE MODULE.REC=""'
    SRC<-1>='IF MODULE.REC<':MODULE$TITLE:'>="" THEN  MODULE.REC<':MODULE$TITLE:'>="MVHub Core Module"'
    SRC<-1>='IF  MODULE.REC<':MODULE$JSNAME:'>="" THEN MODULE.REC<':MODULE$JSNAME:'>="mvHubCore"'
    SRC<-1>='LOCATE("MVHUB.TEMPLATE",MODULE.REC,':MODULE$BLDLST_MAPIID:';IPOS) ELSE MODULE.REC=INSERT(MODULE.REC,':MODULE$BLDLST_MAPIID:',1;"MVHUB.TEMPLATE")'
    SRC<-1>='LOCATE("MVHUB.MAP",MODULE.REC,':MODULE$BLDLST_MAPIID:';IPOS) ELSE MODULE.REC=INSERT(MODULE.REC,':MODULE$BLDLST_MAPIID:',1;"MVHUB.MAP")'
    SRC<-1>='WRITE MODULE.REC ON F.MODULE,"':MVHUB.MODULE:'"'
*
    SRC<-1>="* End of Install Program"
*
    SRC<-1>='CRT "Install of MV Hub Complete"'
*
    WRITE SRC ON F.BP,"INSTALL.MVHUB"
    EXECUTE "FORMAT MVHUB.BP INSTALL.MVHUB"
    EXECUTE "BASIC MVHUB.BP INSTALL.MVHUB"
    EXECUTE "CATALOG MVHUB.BP INSTALL.MVHUB "
*
    STOP
*-------------------------------------------------------
ADD.PROGRAM:
*
    READ CODE FROM F.BP,CODE.ID ELSE ABORT CODE.ID
    ECODE="" ; STATUS = ENCODE("Base64",1,CODE,1,ECODE,1)
    IF STATUS # 0 THEN ABORT CODE.ID
    CONVERT CHAR$LINEFEED:CHAR$RETURN TO @AM IN ECODE
*
    SRC<-1>="* Add Record ":CODE.ID:" To File":SEPARATOR
    IF ADD.ONLY THEN SRC<-1>='  READ CHK FROM F.BP,"':CODE.ID:'" ELSE'
    CNT=DCOUNT(ECODE,@AM)-1
    SRC<-1>='REC="':ECODE<1>:'":CHAR$LF:CHAR$RETURN'
    FOR C=2 TO CNT
        SRC<-1>='REC:="':ECODE<C>:'":CHAR$LF:CHAR$RETURN'
    NEXT C
*
    SRC<-1>='PROG.REC=""; STATUS = ENCODE("Base64",2,REC,1,PROG.REC,1)'
    SRC<-1>='CRT "Adding Source Code   : ':CODE.ID:'"'
*
    SRC<-1>='    WRITE PROG.REC ON F.BP,"':CODE.ID:'"'
    IF ADD.ONLY THEN SRC<-1>=" END"
*
    IF COMPILE.IT THEN
        SRC<-1>='    EXECUTE "BASIC MVHUB.BP ':CODE.ID:'" CAPTURING MEMORY'
        SRC<-1>='    EXECUTE "CATALOG MVHUB.BP ':CODE.ID:'" CAPTURING MEMORY':SEPARATOR
    END
    SRC:=SEPARATOR
    COMPILE.IT=@FALSE ; ADD.ONLY=@FALSE
*
    RETURN
*-------------------------------------------------------
ADD.TEMPLATE:
*
    READ CODE FROM F.TEMPLATE,CODE.ID ELSE RETURN
    ECODE="" ; STATUS = ENCODE("Base64",1,CODE,1,ECODE,1)
    IF STATUS # 0 THEN ABORT CODE.ID
    CONVERT CHAR$LINEFEED:CHAR$RETURN TO @AM IN ECODE
*
    SRC<-1>="* Add Record ":CODE.ID:" To File":SEPARATOR
    CNT=DCOUNT(ECODE,@AM)-1
    SRC<-1>='REC="':ECODE<1>:'":CHAR$LF:CHAR$RETURN'
    FOR C=2 TO CNT
        SRC<-1>='REC:="':ECODE<C>:'":CHAR$LF:CHAR$RETURN'
    NEXT C
*
    SRC<-1>='TEMPLATE.REC=""; STATUS = ENCODE("Base64",2,REC,1,TEMPLATE.REC,1)'
    SRC<-1>='CRT "Adding Template Code : ':CODE.ID:'"'
*
    SRC<-1>='    WRITE TEMPLATE.REC ON F.TEMPLATE,"':CODE.ID:'"'
    SRC:=SEPARATOR
*
    RETURN
